<style>
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f5f7fa; /* Light background for the entire page */
    color: #333; /* Default text color */
    margin: 0;
    padding: 0;
}

.page-wrapper {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.content-wrapper {
    flex: 1 0 auto;
    padding: 10px;
    width: 100%;
    max-width: 1000px; /* Reduce max width for better scaling */
}

.checkout-container {
    width: 100%;
    padding: 15px;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
}

h1 {
    font-size: 28px; /* Larger font size for the main heading */
    color: #2d3748; /* Darker color for headings */
    text-align: center; /* Center align the heading */
    margin-bottom: 20px; /* Space below the heading */
}

h2 {
    font-size: 18px;
    margin-bottom: 15px;
    color: #374151;
    font-weight: 500;
}

.order-summary, .shipping-details {
    background: white;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.cart-item {
    display: flex;
    padding: 12px 0;
    border-bottom: 1px solid #eee;
}

.cart-item:last-child {
    border-bottom: none;
}

.item-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 6px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
}

.item-details {
    margin-left: 15px;
    flex-grow: 1;
}

.item-details h3 {
    margin: 0 0 8px 0;
    font-size: 14px;
    font-weight: 500;
    color: #111827;
}

.price, .quantity, .total {
    font-size: 14px;
    margin: 4px 0;
}

.price {
    color: #333;
    font-weight: 600;
}

.quantity, .total {
    color: #4b5563;
}

.order-total {
    margin-top: 15px;
    text-align: right;
    font-size: 20px; /* Font size for order total */
    font-weight: bold; /* Bold text for order total */
    color: #333;
}

.address-card {
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    background-color: #ffffff;
}

.address-card:hover {
    border-color: #2962ff;
    background-color: #f0f7ff;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
}

.address-card.selected {
    border-color: #2962ff;
    background-color: #eef6ff;
}

.address-radio {
    position: absolute;
    top: 12px;
    right: 12px;
}

.address-name {
    font-weight: 600;
    font-size: 16px;
    margin-bottom: 5px;
}

.address-text {
    color: #4b5563;
    line-height: 1.4;
    font-size: 15px;
}

.add-address-link {
    font-size: 14px;
    color: #2962ff;
    text-decoration: none;
    font-weight: bold;
}

.add-address-link:hover {
    text-decoration: underline;
    color: #2563eb;
}

.payment-method h2 {
    margin-top: 0;
    font-weight: 500;
}

.payment-options label {
    font-size: 14px;
    color: #374151;
    cursor: pointer;
    margin-bottom: 8px;
    display: block;
}

.checkout-button {
    background-color: #4f46e5; /* Button background color */
    color: white; /* Button text color */
    padding: 12px; /* Padding inside the button */
    border: none; /* Remove default border */
    border-radius: 8px; /* Rounded corners */
    font-size: 16px; /* Font size */
    font-weight: bold; /* Bold text */
    cursor: pointer; /* Pointer cursor on hover */
    width: 20%; /* Full width button */
    transition: background-color 0.3s, transform 0.2s; /* Smooth transition */
    margin-left: 650px;
    margin-top: -40px;
 
  
}

.checkout-button:hover {
    background-color: #3b3f8c; /* Darker shade on hover */
    transform: scale(1.05); /* Slightly enlarge the button on hover */
}

@media (max-width: 768px) {
    .checkout-container {
        padding: 12px;
    }

    .cart-item {
        flex-direction: column;
    }

    .item-image {
        width: 70px;
        height: 70px;
    }

    .item-details {
        margin-left: 0;
        margin-top: 8px;
    }

    .order-total {
        text-align: center;
    }

    .checkout-button {
        width: auto;
        font-size: 14px; /* Smaller font size for buttons on mobile */
    }
}

.coupon-container {
    background-color: #e6f7ff; /* Light background for the coupon section */
    border: 1px solid #cbd5e1; /* Border color */
    border-radius: 8px; /* Rounded corners */
    padding: 30px; /* Padding around the content */
    margin-top: 20px; /* Space above the coupon section */
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    
    
}

.coupon-input {
    display: flex; /* Flexbox for alignment */
    gap: 100px; /* Space between input and button */
    width: 100px;
}

#couponCode {
    flex: 1; /* Take up remaining space */
   
    margin-left: 200px;

    border-radius: 4px; /* Rounded corners */
    font-size: 18px; /* Font size */
    transition: border-color 0.3s; /* Smooth transition for border color */
    font-size: 14px;
    width: 300px;
    padding: 8px 108px;
    border: none;

}

#couponCode:focus {
    border-color: #4f46e5; /* Change border color on focus */
    outline: none; /* Remove default outline */
}

#applyCouponButton {
    background-color: #4f46e5; /* Button background color */
    color: white; /* Button text color */
    padding: 10px 20px; /* Padding inside the button */
    border: none; /* Remove default border */
    border-radius: 4px; /* Rounded corners */
    cursor: pointer; /* Pointer cursor on hover */
    font-size: 16px; /* Font size */
    transition: background-color 0.3s, transform 0.2s; /* Smooth transition */
}

#applyCouponButton:hover {
    background-color: #3b3f8c; /* Darker shade on hover */
    transform: scale(1.05); /* Slightly enlarge the button on hover */
}

#couponMessage {
    margin-top: 10px; /* Space above the message */
    font-weight: bold; /* Bold text */
    color: red; /* Color for error messages */
}
.removeCoupon{
    background-color: red;
    color: white;
    padding: 8px 10px;
    border: none;

}
.wallet-option {

    gap: 6px;
    font-size: 16px;
    font-weight: 500;
}

.wallet-balance {
  
    color:  #2962ff;
    
    font-size: 14px;
    font-weight: bold;
   
    border-radius: 4px;
    width: 190px;
  
  

}
.wallet-amount{
    width: 50px;
}
.checkout-button2{
    background-color: #4f46e5; 
    color: white;
    border: none;
    padding: 8px;
    margin-left: 580px;
    cursor: pointer;
}
.coupon-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
    align-items: center;
    padding: 10px;
}

.coupon-card {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: 300px;
    padding: 10px;
    background: #f9f9f9;
    border-radius: 10px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.coupon-code {
    font-weight: bold;
    font-size: 14px;
}

.coupon-discount {
    font-size: 14px;
    color: #28a745;
}

.apply-btn {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s ease;
}

.apply-btn:hover {
    background-color: #218838;
}

.no-coupons {
    text-align: center;
    font-weight: bold;
    color: gray;
}
/* Styles for coupon system */
.coupon-form {
    margin: 20px 0;
    padding: 15px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background-color: #f9f9f9;
}

.coupon-input-group {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
}

.coupon-input-group input {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

.coupon-input-group input:disabled {
    background-color: #f5f5f5;
    cursor: not-allowed;
}

.apply-coupon {
    padding: 8px 16px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.apply-coupon:hover {
    background-color: #45a049;
}

.removeCoupon {
    padding: 6px 12px;
    background-color: #ff4444;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    transition: background-color 0.3s;
}

.removeCoupon:hover {
    background-color: #cc0000;
}

.coupon-message {
    margin: 5px 0;
    font-size: 14px;
}

#appliedCoupon {
    display: inline-block;
    padding: 2px 8px;
    background-color: #e8f5e9;
    border-radius: 4px;
    margin-left: 5px;
}
</style>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<%-include('../../views/partials/user/header')%>



<div class="page-wrapper">
    <div class="content-wrapper">
        <div class="checkout-container page-animation">
            <h1>Checkout</h1>
    
          
            <div class="order-summary">
                <h2>Order Summary</h2>
                <% cart.item.forEach(item => { %>
                    <div class="cart-item">
                        <img src="/<%= item.productId.productImage[0] %>" alt="<%= item.name %>" class="item-image">
                        <div class="item-details">
                            <h3><%= item.name %></h3>
                            <p class="price">₹<%= item.price %></p>
                            <p class="quantity">Quantity: <%= item.quantity %></p>
                            <p class="total">Total: ₹<%= item.price * item.quantity %></p>
                        </div>
                    </div>
                <% }); %>
              
                
                <div class="coupon-section">
                
                    <div class="place-order">
                        <h2>Place Order</h2>
                        <p>Coupon Applied: <span id="appliedCoupon"></span></p>
                        <form action="/remove-coupon" method="POST" id="removeCouponForm" style="display: none;">
                            <button type="submit" class="removeCoupon">Remove Coupon</button>
                        </form>
                    </div>
                </div>
                
                <div class="order-total">
                    <h3>Total: ₹<span id="totalAmount"><%= cart.cartTotal %></span></h3>
                </div>
            </div>
    
            <div class="shipping-details">
                <h2>Shipping Details</h2>
                <form class="checkout-form" method="POST" action="/checkout">
                    
                    <div class="address-cards-container">
                        <% address.forEach(addr => { %>
                            <div class="address-card" onclick="selectAddress(this, '<%= addr.id %>')">
                                <input type="radio" name="addressId" value="<%= addr.id %>" class="address-radio" required>
                                <div class="address-details">
                                    <div class="address-name"><%= addr.fullName %></div>
                                    <div class="address-text">
                                        <%= addr.street %>,<br>
                                        <%= addr.city %>, 
                                        <%= addr.state %>,<br>
                                        <%= addr.postalCode %> <br>
                                        <%= addr.country %>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                    
                   
                    <div class="add-new-address">
                        <a href="/address" class="add-address-link">+ Add New Address</a>
                    </div>
        
    <div class="payment-method">
        <h2>Payment Method</h2>
        <div class="payment-options">
            <% if (cart.cartTotal <= 1000) { %>
                <label style="color: red;">Cash on Delivery (COD) not available for orders above Rs 1000</label>
            <% } else { %>
                <label>
                    <input type="radio" name="paymentMethod" value="COD" required>
                    Cash on Delivery (COD)
                </label>
            <% } %>
            

            <label>
                <input type="radio" name="paymentMethod" value="online" required>
                Online Payment
            </label>

            <label class="wallet-option">
                <input type="radio" name="paymentMethod" value="Wallet" required>
                Wallet 
                <div class="wallet-balance">
                    <% if (wallet) { %>
                        <span class="wallet-amount"> Available balance : ₹ <%= wallet.balance.toFixed(0) %></span>
                    <% } else { %>
                        <span class="wallet-amount"> Available balance : ₹ 0</span>
                    <% } %>
                </div>
            </label>
        </div>
    </div>

        
                     
                        <div class="checkout-actions">
                            <button type="submit" class="checkout-button">Place order</button>
                        </div>
                    </form>
                </div>
                
            </div>
        </div>
    </div>
    
    <%-include('../../views/partials/user/footer')%>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
document.addEventListener('DOMContentLoaded', function() {
    const checkoutForm = document.querySelector('.checkout-form');
    
    checkoutForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('Form submission started');

        const addressId = document.querySelector('input[name="addressId"]:checked')?.value;
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
        const couponCode = document.getElementById('appliedCoupon')?.textContent || '';

        console.log('Selected payment method:', paymentMethod);
        console.log('Selected address:', addressId);
        console.log('Applied coupon:', couponCode);

        // Validate address selection
        if (!addressId) {
            Swal.fire({
                text: 'Please select a delivery address',
                icon: 'warning',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });
            return;
        }

        // Validate payment method selection
        if (!paymentMethod) {
            Swal.fire({
                text: 'Please select a payment method',
                icon: 'warning',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });
            return;
        }

        // Handle online payment
        if (paymentMethod === 'online') {
            try {
                console.log('Initiating online payment...');
                const response = await fetch('/initiate-razorpay', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ addressId })
                });
                
                const data = await response.json();
                console.log('Razorpay initialization response:', data);
                
                if (data.success) {
                    initializeRazorpay(data.order.id, data.order.amount);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Initialization Failed',
                        text: data.message || 'Unable to initialize payment',
                        confirmButtonColor: '#3085d6'
                    });
                }
            } catch (error) {
                console.error('Razorpay initialization error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to initiate payment. Please try again.',
                    confirmButtonColor: '#3085d6'
                });
            }
            return;
        }

        // Handle COD or Wallet payment
        try {
            console.log('Processing COD/Wallet payment...');
            const formData = new FormData(this);
            const data = {
                addressId: formData.get('addressId'),
                paymentMethod: formData.get('paymentMethod'),
                couponCode: couponCode
            };
            
            console.log('Sending payment data:', data);

            const response = await fetch('/checkout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            console.log('Raw response:', response);
            const result = await response.json();
            console.log('Payment response:', result);

            if (result.success) {
                Swal.fire({
                text: 'Order placed succesfuly',
                icon: 'success',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
                }).then(() => {
                    window.location.href = '/ordersuccess';
                });
            } else {
                let errorMessage = 'Something went wrong!';
                if (paymentMethod === 'Wallet' && result.error === 'insufficient_balance') {
                    errorMessage = 'Insufficient wallet balance';
                } else if (result.message) {
                    errorMessage = result.message;
                }

                Swal.fire({
                text: errorMessage,
                 icon: 'error',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
                });
            }
        } catch (error) {
            console.error('Payment processing error:', error);
            
        
            if (error.response) {
                console.error('Error response:', {
                    status: error.response.status,
                    statusText: error.response.statusText,
                    data: await error.response.text()
                });
            }

            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to process payment. Please try again.',
                confirmButtonColor: '#3085d6'
            });
        }
    });
});

function initializeRazorpay(orderId, amount) {
    console.log('Initializing Razorpay with:', { orderId, amount });
    const options = {
        key: '<%= process.env.key_id %>', 
        amount: amount * 100,
        currency: 'INR',
        name: 'Kuppayam',
        description: 'Purchase Payment',
        order_id: orderId,
        handler: function(response) {
            console.log('Razorpay payment success:', response);
            handleRazorpayResponse(response);
        },
        modal: {
            ondismiss: function() {
                console.log('Razorpay modal dismissed');
                window.location.href = '/orderDetails';
            }
        },
        prefill: {
            name: '<%= user?.name %>',
            email: '<%= user?.email %>',
        },
        theme: {
            color: '#2962ff'
        }
    };

    const rzp = new Razorpay(options);
    
    rzp.on('payment.failed', function(response) {
        console.log('Razorpay payment failed:', response);
        handlePaymentFailure(response);
    });
    
    rzp.open();
}

async function handleRazorpayResponse(response) {
    try {
        console.log('Processing Razorpay response:', response);
        const addressId = document.querySelector('input[name="addressId"]:checked').value;
        
        const verifyResponse = await fetch('/verify-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature,
                addressId: addressId
            })
        });

        const data = await verifyResponse.json();
        console.log('Payment verification response:', data);
        
        if (data.success) {
            Swal.fire({
                text: 'Order placed succesfuly',
                icon: 'success',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            }).then(() => {
                window.location.href = '/ordersuccess';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Payment Verification Failed',
                text: data.message || 'Please contact support if payment was deducted',
                confirmButtonColor: '#3085d6'
            });
        }
    } catch (error) {
        console.error('Payment verification error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Payment Verification Failed',
            text: 'Please contact support if payment was deducted',
            confirmButtonColor: '#3085d6'
        });
    }
}

async function handlePaymentFailure(response) {
    console.error('Payment failed:', response.error);
    
    try {
        const addressId = document.querySelector('input[name="addressId"]:checked').value;
        await fetch('/payment-failed', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                razorpay_order_id: response.error.metadata.order_id,
                razorpay_payment_id: response.error.metadata.payment_id,
                error_code: response.error.code,
                error_description: response.error.description,
                addressId: addressId
            })
        });

       
        Swal.fire({
               text: 'Payment failed',
                icon: 'error',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 5000,
            didClose: () => {
                window.location.href = '/orderDetails';
            }
        });
    
    } catch (error) {
        console.error('Error:', error);
 
        Swal.fire({
            text: 'Payment failed',
                icon: 'error',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
            didClose: () => {
                window.location.href = '/orderDetails';
            }
        });
    }
}

function handlePaymentError(result, paymentMethod) {
    let errorMessage = 'Something went wrong!';
    
    if (paymentMethod === 'Wallet' && result.error === 'insufficient_balance') {
        errorMessage = 'Insufficient wallet balance';
    } else if (result.message) {
        errorMessage = result.message;
    }

    showAlert(errorMessage, 'error');
}


function showSuccessAndRedirect() {
        Swal.fire({
            text: 'Order placed succesfuly',
                icon: 'success',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
    }).then(() => {
        redirectTo('/ordersuccess');
    });

}


function redirectTo(url) {
    window.location.href = url;
}


function selectAddress(card, addressId) {
 
    document.querySelectorAll('.address-card').forEach(card => {
        card.classList.remove('selected');
    });
    
    
    card.classList.add('selected');
    
    card.querySelector('input[type="radio"]').checked = true;
}
</script>
