<style>
    :root {
      --primary-color: #3a86ff;
      --primary-light: #e9efff;
      --secondary-color: #4361ee;
      --accent-color: #ef476f;
      --success-color: #06d6a0;
      --warning-color: #ffd166;
      --danger-color: #ef476f;
      --text-primary: #1a1a2e;
      --text-secondary: #4a4e69;
      --text-light: #6c757d;
      --bg-color: #f7f9fc;
      --card-bg: #ffffff;
      --border-color: #e2e8f0;
      --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
      --shadow-md: 0 4px 10px rgba(0, 0, 0, 0.08);
      --border-radius: 10px;
      --transition: all 0.3s ease;
    }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif;
      background-color: var(--bg-color);
      color: var(--text-primary);
      margin: 0;
      padding: 0;
      line-height: 1.6;
    }
    
    .page-wrapper {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .content-wrapper {
      flex: 1;
      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 25px 25px;
    }
    
    .checkout-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 30px;
      animation: fadeIn 0.5s ease;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .checkout-title {
      grid-column: 1 / -1;
      margin-bottom: 30px;
    }
    
    h1 {
      font-size: 32px;
      font-weight: 700;
      color: var(--text-primary);
      margin: 0;
      position: relative;
      display: inline-block;
    }
    
    h1::after {
      content: '';
      position: absolute;
      bottom: -8px;
      left: 0;
      width: 60px;
      height: 4px;
      background-color: var(--primary-color);
      border-radius: 2px;
    }
    
    h2 {
      font-size: 20px;
      font-weight: 600;
      color: var(--text-primary);
      margin: 0 0 20px 0;
      padding-bottom: 10px;
      border-bottom: 1px solid var(--border-color);
    }
    
    .order-summary, .shipping-details {
      background: var(--card-bg);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-md);
      padding: 30px;
      position: relative;
      overflow: hidden;
    }
    
    .order-summary::before, .shipping-details::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
    }
    
    .cart-items-container {
      max-height: 400px;
      overflow-y: auto;
      margin-bottom: 20px;
      padding-right: 20px;
    }
    
    .cart-items-container::-webkit-scrollbar {
      width: 6px;
    }
    
    .cart-items-container::-webkit-scrollbar-track {
      background: var(--border-color);
      border-radius: 10px;
    }
    
    .cart-items-container::-webkit-scrollbar-thumb {
      background: var(--primary-color);
      border-radius: 10px;
    }
    
    .cart-item {
      display: flex;
      padding: 16px 0;
      border-bottom: 1px solid var(--border-color);
      transition: var(--transition);
    }
    
    .cart-item:hover {
      transform: translateX(5px);
    }
    
    .cart-item:last-child {
      border-bottom: none;
    }
    
    .item-image {
      width: 104px;
      height: 122px;
      object-fit: cover;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
    }
    
    .item-image:hover {
      transform: scale(1.05);
    }
    
    .item-details {
      margin-left: 20px;
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }
    
    .item-details h3 {
      margin: 0 0 8px 0;
      font-size: 16px;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .item-meta {
      display: flex;
      justify-content: space-between;
      align-items: flex-end;
    }
    
    .price-qty {
      font-size: 14px;
    }
    
    .price {
      color: var(--text-primary);
      font-weight: 700;
      font-size: 16px;
    }
    
    .quantity, .total {
      color: var(--text-light);
      margin-top: 6px;
    }
    
    .total {
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .coupon-section {
      background-color: var(--primary-light);
      border-radius: var(--border-radius);
      padding: 20px;
      margin: 25px 0;
      position: relative;
      overflow: hidden;
    }
    
    .coupon-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background-color: var(--primary-color);
    }
    
    .coupon-input {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    
    .coupon-input input {
      flex: 1;
      padding: 12px 15px;
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      font-size: 14px;
      transition: var(--transition);
      background-color: white;
      box-shadow: var(--shadow-sm);
    }
    
    .coupon-input input:focus {
      border-color: var(--primary-color);
      outline: none;
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
    }
    
    .coupon-input button, .checkout-button, .removeCoupon {
      padding: 12px 20px;
      background-color: var(--primary-color);
      color: white;
      font-weight: 600;
      border: none;
      border-radius: var(--border-radius);
      cursor: pointer;
      transition: var(--transition);
      text-transform: uppercase;
      letter-spacing: 0.5px;
      font-size: 14px;
    }
    
    .coupon-input button:hover, .checkout-button:hover {
      background-color: var(--secondary-color);
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(67, 97, 238, 0.3);
    }
    
    #couponMessage {
      margin-top: 10px;
      font-weight: 500;
      color: var(--danger-color);
    }
    
    .applied-coupon {
      margin-top: 15px;
      display: flex;
      align-items: center;
      gap: 50px;
    }
    
    #appliedCoupon {
      background-color: var(--success-color);
      color: white;
      padding: 2px 8px;
      border-radius:8px;
      font-size: 14px;
      font-weight: 600;
      display: inline-block;
    }
    
    .removeCoupon {
      background-color: var(--danger-color);
      padding: 5px 10px;
      font-size: 12px;
    }
    
    .removeCoupon:hover {
      background-color: #d93b58;
    }
    
    .order-total {
      margin-top: 25px;
      padding-top: 20px;
      border-top: 2px dashed var(--border-color);
      text-align: right;
    }
    
    .order-total h3 {
      font-size: 22px;
      font-weight: 700;
      color: var(--text-primary);
      margin: 0;
    }
    
    .address-cards-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }
    
    .address-card {
      border: 2px solid var(--border-color);
      border-radius: var(--border-radius);
      padding: 20px;
      cursor: pointer;
      transition: var(--transition);
      position: relative;
      background-color: var(--card-bg);
    }
    
    .address-card:hover {
      border-color: var(--primary-color);
      background-color: var(--primary-light);
      transform: translateY(-3px);
    }
    
    .address-card.selected {
      border-color: var(--primary-color);
      background-color: var(--primary-light);
    }
    
    .address-radio {
      position: absolute;
      top: 15px;
      right: 15px;
      accent-color: var(--primary-color);
      transform: scale(1.2);
    }
    
    .address-name {
      font-weight: 700;
      font-size: 16px;
      margin-bottom: 8px;
      color: var(--text-primary);
    }
    
    .address-text {
      color: var(--text-secondary);
      line-height: 1.5;
      font-size: 14px;
    }
    
    .add-new-address {
      margin: 20px 0;
    }
    
    .add-address-link {
      display: inline-flex;
      align-items: center;
      font-size: 15px;
      color: var(--primary-color);
      text-decoration: none;
      font-weight: 600;
      transition: var(--transition);
    }
    
    .add-address-link::before {
      content: '+';
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 24px;
      height: 24px;
      background-color: var(--primary-light);
      color: var(--primary-color);
      border-radius: 50%;
      margin-right: 8px;
    }
    
    .add-address-link:hover {
      color: var(--secondary-color);
      transform: translateX(5px);
    }
    
    .payment-method {
      margin-top: 30px;
    }
    
    .payment-options {
      display: grid;
      gap: 15px;
    }
    
    .payment-options label {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 15px;
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      cursor: pointer;
      transition: var(--transition);
      font-size: 15px;
      font-weight: 500;
      color: var(--text-primary);
    }
    
    .payment-options label:hover {
      border-color: var(--primary-color);
      background-color: var(--primary-light);
    }
    
    .payment-options input[type="radio"] {
      accent-color: var(--primary-color);
      transform: scale(1.2);
    }
    
    .wallet-option {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .wallet-balance {
      color: var(--text-primary);
      font-size: 14px;
      font-weight: 600;
    }
    
    .wallet-amount {
      background-color: var(--primary-light);
      color: var(--primary-color);
      padding: 5px 10px;
      border-radius: var(--border-radius);
      font-weight: 700;
    }
    
    .checkout-actions {
      margin-top: 30px;
      display: flex;
      justify-content: flex-end;
    }
    
    .checkout-button {
      width: auto;
      min-width: 200px;
      padding: 15px 30px;
      font-size: 16px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }
    
    .checkout-button::after {
      content: '→';
      font-size: 20px;
      transition: var(--transition);
    }
    
    .checkout-button:hover::after {
      transform: translateX(5px);
    }
    
    @media (max-width: 992px) {
      .checkout-container {
        grid-template-columns: 1fr;
      }
    }
    
    @media (max-width: 768px) {
      .content-wrapper {
        padding: 20px 15px;
      }
      
      .order-summary, .shipping-details {
        padding: 20px;
      }
      
      .cart-item {
        flex-direction: row;
        align-items: center;
      }
      
      .item-image {
        width: 70px;
        height: 70px;
      }
      
      .item-details {
        margin-left: 15px;
      }
      
      .address-cards-container {
        grid-template-columns: 1fr;
      }
      
      .coupon-input {
        flex-direction: column;
      }
      
      .coupon-input input, .coupon-input button {
        width: 100%;
      }
      
      .checkout-button {
        width: 100%;
        margin-left: 0;
        margin-top: 0;
      }
    }
    .policy-container {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 20px;
        margin: 30px 0;
        font-family: 'Arial', sans-serif;
    }
    
    .policy-card {
        flex: 1;
        min-width: 250px;
        display: flex;
        align-items: center;
        padding: 20px;
        border-radius: 8px;
        background-color: #f8f9fa;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .policy-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .policy-icon {
        font-size: 2rem;
        color: #4285f4;
        margin-right: 15px;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background-color: rgba(66,133,244,0.1);
    }
    
    .policy-content h3 {
        margin: 0 0 5px 0;
        color: #333;
        font-size: 18px;
    }
    
    .policy-content p {
        margin: 0;
        color: #666;
        font-size: 14px;
        line-height: 1.5;
    }
    
    @media (max-width: 768px) {
        .policy-container {
            flex-direction: column;
        }
    }
    #viewCouponsButton {
    margin-left: 10px;
    background-color: #4285f4;
    color: #ffffff;
    border: 1px solid #ddd;
    padding: 6px 8px;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s;
  }
  
 
  .coupon-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
  }
  
  .coupon-modal-content {
    background-color: #fff;
    margin: 10% auto;
    padding: 20px;
    border-radius: 8px;
    width: 80%;
    max-width: 600px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    position: relative;
  }
  
  .close-modal {
    position: absolute;
    top: 10px;
    right: 15px;
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
  }
  
  .close-modal:hover {
    color: #333;
  }
  
  .coupon-card {
    border: 1px dashed #ddd;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #f8f9fa;
    transition: all 0.3s;
  }
  
  .coupon-card:hover {
    border-color: #2962ff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }
  
  .coupon-info {
    flex: 1;
  }
  
  .coupon-code {
    font-weight: bold;
    color: #2962ff;
    font-size: 18px;
    margin-bottom: 5px;
  }
  
  .coupon-description {
    color: #666;
    margin-bottom: 5px;
  }
  
  .coupon-valid-until {
    font-size: 12px;
    color: #999;
  }
  
  .use-coupon-btn {
    background-color: #2962ff;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
  }
  
  .use-coupon-btn:hover {
    background-color: #1a54f7;
  }
  
  .loading-coupons {
    text-align: center;
    color: #666;
    padding: 20px;
  }
  
  .no-coupons {
    text-align: center;
    color: #666;
    padding: 20px;
  }
  /* Modal Styles */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
  animation: fadeIn 0.3s ease;
}

.modal-content {
  background-color: #fff;
  margin: 5% auto;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  width: 90%;
  max-width: 600px;
  animation: slideIn 0.3s ease;
}

.close-modal {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
  transition: color 0.2s;
}

.close-modal:hover {
  color: #333;
}

/* Form Styles */
.address-form {
  margin-top: 1.5rem;
}

.form-group {
  margin-bottom: 1.2rem;
}

.form-row {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.2rem;
}

.form-row .form-group {
  flex: 1;
  margin-bottom: 0;
}

.address-form label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #333;
}

.address-form input {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
  transition: border-color 0.2s;
}

.address-form input:focus {
  border-color: #4a90e2;
  outline: none;
  box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
}

.form-actions {
  margin-top: 1.5rem;
  text-align: right;
}

.save-address-btn {
  background-color: #4a90e2;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 4px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s;
}

.save-address-btn:hover {
  background-color: #3a7bc8;
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideIn {
  from { transform: translateY(-20px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

/* Update Add New Address link */
.add-address-link {
  display: inline-flex;
  align-items: center;
  color: #4a90e2;
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
}

.add-address-link:before {
  content: "+";
  margin-right: 0.5rem;
  font-size: 1.2rem;
}

.add-address-link:hover {
  text-decoration: underline;
}
    </style>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <%-include('../../views/partials/user/header')%>
    
    <div class="page-wrapper">
      <div class="content-wrapper">
        <div class="checkout-container page-animation">
          <div class="checkout-title">
            <h1>Checkout</h1>
          </div>
          
          <div class="order-summary">
            <h2>Order Summary</h2>
            <div class="cart-items-container">
              <% cart.item.forEach(item => { %>
                <div class="cart-item">
                  <img src="/<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" class="item-image">
                  <div class="item-details">
                    <h3><%=  item.productId.productName %></h3>
                    <div class="item-meta">
                      <div class="price-qty">
                        <p class="price">₹<%= item.price %></p>
                        <p class="quantity">Quantity: <%= item.quantity %></p>
                      </div>
                      <p class="total">₹<%= item.price * item.quantity %></p>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
            
            <div class="coupon-section">
              <h2>Apply Coupon</h2>
              <div class="coupon-input">
                <input type="text" id="couponCode" placeholder="Enter your coupon code" />
                <button id="applyCouponButton">Apply</button>
                <button id="viewCouponsButton" type="button">Available Coupons</button>
              </div>
              <p id="couponMessage"></p>
              <div class="applied-coupon">
                <div>Coupon Applied: <span id="appliedCoupon"></span></div>
                <form action="/remove-coupon" method="POST" id="removeCouponForm" style="display: none;">
                  <button type="submit" class="removeCoupon">Remove</button>
                </form>
              </div>
            </div>
            
            <!-- Add this at the bottom of your page, before the end of body tag -->
            <div id="couponsModal" class="coupon-modal">
              <div class="coupon-modal-content">
                <span class="close-modal">&times;</span>
                <h2>Available Coupons</h2>
                <div class="coupons-container" id="couponsContainer">
                  <!-- Coupons will be displayed here -->
                  <p class="loading-coupons">Loading available coupons...</p>
                </div>
              </div>
            </div>
            
            
            <div class="order-total">
              <h3>Total: ₹<span id="totalAmount"><%= cart.cartTotal.toFixed(2) %></span></h3>
            </div>
          </div>
          
          <div class="shipping-details">
            <h2>Shipping Details</h2>
            <form class="checkout-form" method="POST" action="/checkout">
              <div class="address-cards-container">
                <% address.forEach(addr => { %>
                  <div class="address-card" onclick="selectAddress(this, '<%= addr.id %>')">
                    <input type="radio" name="addressId" value="<%= addr.id %>" class="address-radio" required>
                    <div class="address-details">
                      <div class="address-name"><%= addr.fullName %></div>
                      <div class="address-text">
                        <%= addr.street %>,<br>
                        <%= addr.city %>, 
                        <%= addr.state %>,<br>
                        <%= addr.postalCode %> <br>
                        <%= addr.country %>
                      </div>
                    </div>
                  </div>
                <% }); %>
              </div>
              
              <div class="add-new-address">
                <a href="/address" class="add-address-link">Add New Address</a>
              </div>
              
              <div class="payment-method">
                <h2>Payment Method</h2>
                <div class="payment-options">
                  <% if (cart.cartTotal <= 1000) { %>
                    <label style="color: var(--danger-color);">Cash on Delivery (COD)  available for orders above Rs 1000</label>
                  <% } else { %>
                    <label>
                      <input type="radio" name="paymentMethod" value="COD" required>
                      Cash on Delivery (COD)
                    </label>
                  <% } %>
                  
                  <label>
                    <input type="radio" name="paymentMethod" value="online" required>
                    Online Payment
                  </label>
                  
                  <label class="wallet-option">
                    <div>
                      <input type="radio" name="paymentMethod" value="Wallet" required>
                      Wallet
                    </div>
                    <div class="wallet-balance">
                      <% if (wallet) { %>
                        <span class="wallet-amount">₹ <%= wallet.balance.toFixed(0) %></span>
                      <% } else { %>
                        <span class="wallet-amount">₹ 0</span>
                      <% } %>
                    </div>
                  </label>
                </div>
              </div>
              
              <div class="checkout-actions">
                <button type="submit" class="checkout-button">Place Order</button>
              </div>
            </form>
          </div>

          <!-- Add New Address Modal -->
<div id="addressModal" class="modal">
  <div class="modal-content">
    <span class="close-modal" id="closeAddressModal">&times;</span>
    <h2>Add New Address</h2>
    <form id="newAddressForm" class="address-form">
      <div class="form-group">
        <label for="fullName">Full Name</label>
        <input type="text" id="fullName" name="fullName" required>
      </div>
      
      <div class="form-group">
        <label for="street">Street Address</label>
        <input type="text" id="street" name="street" required>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="city">City</label>
          <input type="text" id="city" name="city" required>
        </div>
        
        <div class="form-group">
          <label for="state">State</label>
          <input type="text" id="state" name="state" required>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="postalCode">Postal Code</label>
          <input type="text" id="postalCode" name="postalCode" required>
        </div>
        
        <div class="form-group">
          <label for="country">Country</label>
          <input type="text" id="country" name="country" required>
        </div>
      </div>
      
      <div class="form-group">
        <label for="phone">Phone Number</label>
        <input type="tel" id="number" name="number" required>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="save-address-btn">Save Address</button>
      </div>
    </form>
  </div>
</div>
          
        </div>
        <div class="policy-container">
            <div class="policy-card">
                <div class="policy-icon">
                    <i class="fas fa-undo-alt"></i>
                </div>
                <div class="policy-content">
                    <h3>7-Day Return Policy</h3>
                    <p>Not satisfied? Return any item within 7 days for a full refund.</p>
                </div>
            </div>
            
            <div class="policy-card">
                <div class="policy-icon">
                    <i class="fas fa-shipping-fast"></i>
                </div>
                <div class="policy-content">
                    <h3>Secure Fast Delivery</h3>
                    <p>Get your order delivered safely within 24-48 hours.</p>
                </div>
            </div>
            
            <div class="policy-card">
                <div class="policy-icon">
                    <i class="fas fa-shield-alt"></i>
                </div>
                <div class="policy-content">
                    <h3>Secure Payment</h3>
                    <p>Shop with confidence using our encrypted payment system.</p>
                </div>
            </div>
        </div>
      </div>
      
    </div>
   
    <%-include('../../views/partials/user/footer')%>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
document.addEventListener('DOMContentLoaded', function() {


  const addressModal = document.getElementById('addressModal');
const closeAddressModal = document.getElementById('closeAddressModal');

const addAddressLink = document.querySelector('.add-address-link');
if (addAddressLink) {
  addAddressLink.addEventListener('click', function (e) {
    e.preventDefault();
    addressModal.style.display = 'block';
    document.body.style.overflow = 'hidden';
  });
}

if (closeAddressModal) {
  closeAddressModal.addEventListener('click', function () {
    addressModal.style.display = 'none';
    document.body.style.overflow = '';
  });
}

window.addEventListener('click', function (e) {
  if (e.target === addressModal) {
    addressModal.style.display = 'none';
    document.body.style.overflow = '';
  }
});

const newAddressForm = document.getElementById('newAddressForm');
if (newAddressForm) {
  newAddressForm.addEventListener('submit', async function (e) {
    e.preventDefault();

    const formData = new FormData(newAddressForm);
    const jsonData = {};
    formData.forEach((value, key) => {
      jsonData[key] = value;
    });

    try {
      const response = await fetch('/address/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(jsonData)
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      console.log('Response Data:', data);

      if (data.success) {
        
        addressModal.style.display = 'none'; 
        newAddressForm.reset(); 
        document.body.style.overflow = '';

        Swal.fire({
               text: 'Address added successfully',
                icon: 'success',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
        }).then(() => {
            window.location.reload();
        });
      } else {
       
        Swal.fire({
               text: data.message,
                icon: 'warning',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
        }); 
      }
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        title: 'Error!',
        text: 'There was a problem adding your address. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  });
}


function addNewAddressCard(address) {
  if (!address || !address.id) {
    console.error('Invalid address object:', address);
    return;
  }

  const addressContainer = document.querySelector('.address-cards-container');
  if (!addressContainer) return;

  const newAddressCard = document.createElement('div');
  newAddressCard.className = 'address-card';
  newAddressCard.setAttribute('onclick', `selectAddress(this, '${address.id}')`);

  newAddressCard.innerHTML = `
    <input type="radio" name="addressId" value="${address.id}" class="address-radio" required>
    <div class="address-details">
      <div class="address-name">${address.fullName}</div>
      <div class="address-text">
        ${address.street},<br>
        ${address.city}, ${address.state},<br>
        ${address.postalCode} <br>
        ${address.country}
      </div>
    </div>
  `;

  addressContainer.appendChild(newAddressCard);

  // Select the new address
  const radioInput = newAddressCard.querySelector('input[type="radio"]');
  if (radioInput) {
    radioInput.checked = true;
    selectAddress(newAddressCard, address.id);
  }
}

    const checkoutForm = document.querySelector('.checkout-form');
    
    checkoutForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('Form submission started');

        const addressId = document.querySelector('input[name="addressId"]:checked')?.value;
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
        const couponCode = document.getElementById('appliedCoupon')?.textContent || '';

        console.log('Selected payment method:', paymentMethod);
        console.log('Selected address:', addressId);
        console.log('Applied coupon:', couponCode);

  
        if (!addressId) {
            Swal.fire({
                text: 'Please select a delivery address',
                icon: 'warning',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });
            return;
        }

    
        if (!paymentMethod) {
            Swal.fire({
                text: 'Please select a payment method',
                icon: 'warning',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });
            return;
        }


        if (paymentMethod === 'online') {
            try {
                console.log('Initiating online payment...');
                const response = await fetch('/initiate-razorpay', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ addressId })
                });
                
                const data = await response.json();
                console.log('Razorpay initialization response:', data);
                
                if (data.success) {
                    initializeRazorpay(data.order.id, data.order.amount);
                } else {
                    Swal.fire({
                        icon: 'error',
                        text: data.message || 'Unable to initialize payment',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000
                    });
                }
            } catch (error) {
                console.error('Razorpay initialization error:', error);
                Swal.fire({
                    icon: 'error',
                    text: 'Failed to initiate payment. Please try again.',
                    confirmButtonColor: '#3085d6'
                });
            }
            return;
        }

   
        try {
            console.log('Processing COD/Wallet payment...');
            const formData = new FormData(this);
            const data = {
                addressId: formData.get('addressId'),
                paymentMethod: formData.get('paymentMethod'),
                couponCode: couponCode
            };
            
            console.log('Sending payment data:', data);

            const response = await fetch('/checkout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            console.log('Raw response:', response);
            const result = await response.json();
            console.log('Payment response:', result);

            if (result.success) {
                Swal.fire({
                text: 'Order placed succesfuly',
                icon: 'success',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
                }).then(() => {
                    window.location.href = '/ordersuccess';
                });
            } else {
                let errorMessage = 'Something went wrong!';
                if (paymentMethod === 'Wallet' && result.error === 'insufficient_balance') {
                    errorMessage = 'Insufficient wallet balance';
                } else if (result.message) {
                    errorMessage = result.message;
                }

                Swal.fire({
                text: errorMessage,
                 icon: 'error',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
                });
            }
        } catch (error) {
            console.error('Payment processing error:', error);
            
        
            if (error.response) {
                console.error('Error response:', {
                    status: error.response.status,
                    statusText: error.response.statusText,
                    data: await error.response.text()
                });
            }

            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to process payment. Please try again.',
                confirmButtonColor: '#3085d6'
            });
        }
    });

    const viewCouponsButton = document.getElementById('viewCouponsButton');
    const couponsModal = document.getElementById('couponsModal');
    const closeModal = document.querySelector('.close-modal');
    const couponsContainer = document.getElementById('couponsContainer');
    

    viewCouponsButton.addEventListener('click', function() {
        couponsModal.style.display = 'block';
        fetchAvailableCoupons();
    });
        closeModal.addEventListener('click', function() {
        couponsModal.style.display = 'none';
    });
    
  
    window.addEventListener('click', function(event) {
        if (event.target === couponsModal) {
            couponsModal.style.display = 'none';
        }
    });
    

    async function fetchAvailableCoupons() {
        try {
            const response = await fetch('/available-coupons');
            const result = await response.json();
            
            if (result.success && result.coupons.length > 0) {
                displayCoupons(result.coupons);
            } else {
                couponsContainer.innerHTML = '<p class="no-coupons">No coupons available at this time.</p>';
            }
        } catch (error) {
            console.error('Error fetching coupons:', error);
            couponsContainer.innerHTML = '<p class="no-coupons">Failed to load coupons. Please try again.</p>';
        }
    }
    
   
    function displayCoupons(coupons) {
        couponsContainer.innerHTML = '';
        
        coupons.forEach(coupon => {
            const couponCard = document.createElement('div');
            couponCard.className = 'coupon-card';
            
            const validUntil = new Date(coupon.validUntil).toLocaleDateString();
            
            couponCard.innerHTML = `
                <div class="coupon-info">
                    <div class="coupon-code">${coupon.code}</div>
                    <div class="coupon-description">${coupon.description}</div>
                    <div class="coupon-valid-until">Valid until: ${validUntil}</div>
                </div>
                <button class="use-coupon-btn" data-coupon="${coupon.code}">Use</button>
            `;
            
            couponsContainer.appendChild(couponCard);
        });
        

        document.querySelectorAll('.use-coupon-btn').forEach(button => {
            button.addEventListener('click', function() {
                const couponCode = this.getAttribute('data-coupon');
                document.getElementById('couponCode').value = couponCode;
                couponsModal.style.display = 'none';
                
                
                document.getElementById('applyCouponButton').click();
            });
        });
    }

    const applyCouponButton = document.getElementById('applyCouponButton');
    const couponCodeInput = document.getElementById('couponCode');
    const couponMessage = document.getElementById('couponMessage');
    const appliedCoupon = document.getElementById('appliedCoupon');
    const removeCouponForm = document.getElementById('removeCouponForm');

    let couponApplied = false; 

    applyCouponButton.addEventListener('click', async function() {
        const couponCode = couponCodeInput.value.trim();
        if (!couponCode) {
            Swal.fire({
                text: 'Enter a coupon!',
                icon: 'warning',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000

            });
            return;
        }

        if (couponApplied) {
            Swal.fire({
                text: 'Coupon already applied!',
                icon: 'info',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });
            return;
        }

        try {
            const response = await fetch('/apply-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ couponCode })
            });

            const result = await response.json();
            if (result.success) {
                appliedCoupon.textContent = couponCode; 
                Swal.fire({
                text: 'Coupon applied successfully!',
                icon: 'success',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
                });
                removeCouponForm.style.display = 'block'; 
                document.getElementById('totalAmount').textContent = result.newTotal;
                couponApplied = true; 
            } else {
                Swal.fire({
                text: result.message,
                icon: 'error',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
                });
            }
        } catch (error) {
            console.error('Error applying coupon:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while applying the coupon.',
            });
        }
    });

    // Handle remove coupon
    removeCouponForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        try {
            const response = await fetch('/remove-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const result = await response.json();
            if (result.success) {
                appliedCoupon.textContent = ''; 
                Swal.fire({
                    text: 'Coupon removed successfully!',
                icon: 'success',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
                });
                removeCouponForm.style.display = 'none'; 
                document.getElementById('totalAmount').textContent = result.newTotal;
                couponApplied = false; 
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message, 
                });
            }
        } catch (error) {
            console.error('Error removing coupon:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while removing the coupon.',
            });
        }
    });
});

function initializeRazorpay(orderId, amount) {
    console.log('Initializing Razorpay with:', { orderId, amount });
    const options = {
        key: '<%= process.env.key_id %>', 
        amount: amount * 100,
        currency: 'INR',
        name: 'Kuppayam',
        description: 'Purchase Payment',
        order_id: orderId,
        handler: function(response) {
            console.log('Razorpay payment success:', response);
            handleRazorpayResponse(response);
        },
        modal: {
            ondismiss: function() {
                console.log('Razorpay modal dismissed');
                window.location.href = '/orderDetails';
            }
        },
        prefill: {
            name: '<%= user?.name %>',
            email: '<%= user?.email %>',
        },
        theme: {
            color: '#2962ff'
        }
    };

    const rzp = new Razorpay(options);
    
    rzp.on('payment.failed', function(response) {
        console.log('Razorpay payment failed:', response);
        handlePaymentFailure(response);
    });
    
    rzp.open();
}

async function handleRazorpayResponse(response) {
    try {
        console.log('Processing Razorpay response:', response);
        const addressId = document.querySelector('input[name="addressId"]:checked').value;
        
        const verifyResponse = await fetch('/verify-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature,
                addressId: addressId
            })
        });

        const data = await verifyResponse.json();
        console.log('Payment verification response:', data);
        
        if (data.success) {
            Swal.fire({
                text: 'Order placed succesfuly',
                icon: 'success',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            }).then(() => {
                window.location.href = '/ordersuccess';
            });
        } else {
            Swal.fire({
                icon: 'error',
                text: data.message || 'Please contact support if payment was deducted',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });
        }
    } catch (error) {
        console.error('Payment verification error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Payment Verification Failed',
            text: 'Please contact support if payment was deducted',
            confirmButtonColor: '#3085d6'
        });
    }
}

async function handlePaymentFailure(response) {
    console.error('Payment failed:', response.error);
    
    try {
        const addressId = document.querySelector('input[name="addressId"]:checked').value;
        await fetch('/payment-failed', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                razorpay_order_id: response.error.metadata.order_id,
                razorpay_payment_id: response.error.metadata.payment_id,
                error_code: response.error.code,
                error_description: response.error.description,
                addressId: addressId
            })
        });

 
        Swal.fire({
               text: 'Payment failed',
                icon: 'error',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 5000,
            didClose: () => {
                window.location.href = '/orderDetails';
            }
        });
    
    } catch (error) {
        console.error('Error:', error);
 
        Swal.fire({
            text: 'Payment failed',
                icon: 'error',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
            didClose: () => {
                window.location.href = '/orderDetails';
            }
        });
    }
}

function handlePaymentError(result, paymentMethod) {
    let errorMessage = 'Something went wrong!';
    
    if (paymentMethod === 'Wallet' && result.error === 'insufficient_balance') {
        errorMessage = 'Insufficient wallet balance';
    } else if (result.message) {
        errorMessage = result.message;
    }

    showAlert(errorMessage, 'error');
}


function showSuccessAndRedirect() {
        Swal.fire({
            text: 'Order placed succesfuly',
                icon: 'success',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
    }).then(() => {
        redirectTo('/ordersuccess');
    });

}


function redirectTo(url) {
    window.location.href = url;
}


function selectAddress(card, addressId) {
 
    document.querySelectorAll('.address-card').forEach(card => {
        card.classList.remove('selected');
    });
    
    
    card.classList.add('selected');
    
    // Check the radio button
    card.querySelector('input[type="radio"]').checked = true;
}
</script>
